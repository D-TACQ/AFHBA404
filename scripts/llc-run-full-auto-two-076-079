#!/bin/bash
# file PROJECTS/AFHBA404/scripts/llc-run-full-auto-two-076-079
# POST is number of samples in LLC control loop
# TLEN is the transient capture, overrun to make sure LLC terminates
POST=${POST:-100000}
let TLEN="$POST*120/100"

UUT1=acq2106_076
UUT2=acq2106_079
ACQPROC_CONFIG=${ACQPROC_CONFIG:-./ACQPROC/configs/epfl_llc_4AO.json}
ACPROC=true

if $ACQPROC; then
    FILE="${UUT1}_VI.dat"
    echo "DEBUG1: $FILE"
else
    FILE="afhba.0.log"
    echo "DEBUG2 $FILE"
fi

AOSITES=${AOSITES:-"1,2"}

# INBOX: acq2106_076, 6 x AI424
# OUTBOX: acq2106_079, 2 x AO424

echo llc-run-full-auto-two-076-079 UUT1=$UUT1 UUT2=$UUT2 POST=$POST TLEN=$TLEN
export LD_LIBRARY_PATH=/usr/local/mdsplus/lib64/
export acq2106_076_path=andros:://home/dt100/TREES/acq2106_076

export EXTCLKDIV=${EXTCLKDIV:-10}

set_clocks() {
    (cd PROJECTS/ACQ400/HAPI/acq400_hapi
#	 SITECLIENT_TRACE=1
	./user_apps/acq2106/acq2106_set_sync_role.py \
	--master_clk fp,1000000,1000000 --master_trg=soft --clkdiv=$EXTCLKDIV \
	$UUT1 $UUT2
	)
}


set_uut() {
    (cd PROJECTS/AFHBA404/HAPI;
    SITECLIENT_TRACE=1
    AOSITES=$AOSITES DOSITES="5,6" PWMSITES="6" python ./llc-test-harness-twobox.py $UUT1 $UUT2
    )
}


control_program() {
	cd PROJECTS/AFHBA404/LLCONTROL
	#echo CONTROL PROGRAM 01
#	export ZCOPY=1
# DUP1: index from zero, 1 is CH02
	export DUP1=1
# skip this many shorts ie 192AI
	export FIRST_WRITE=192
# store this many longs (all of SPAD)
	export STORE_COLS="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"
#	export STORE_COLS=:
# total SPAD 16 longs
	export NCOLS=16
# previously, we stored everything. This may have loaded the RT loop
#	export STORE_COLS="96,97,98,99"
#	export NCOLS=112
	export RTPRIO=40
	export AO_IDENT=1
    export DO32=1
# isolcpus=4,5,6,7,8...
# taskset 0x10 means "run on processor 4"
	export TASKSET="taskset 0x10"
# New variable to offset the PWM dataset in the VO Buffer
        export PWM_OFFSET=132
        [ "x$TASKSET" != "x" ] && echo TASKSET $TASKSET
	$TASKSET ./afhba-llcontrol-two-fiber $POST &
	echo wait for llcontrol, PID $CTRLPID
	wait
	echo CONTROL PROGRAM 99
        sleep 5
        echo "MDSput slice"
	/home/dt100/bin/mds_put_slice.py --ncols $NCOLS --dtype np.uint32 --store_cols $STORE_COLS \
		--tlatch_report=1 --node_name "CH%02d" --default_node ST \
		$UUT1 afhba.0.log
}


control_program2() {

    # Run the control program here
    cd PROJECTS/AFHBA404/
    cat - > control_program.env <<EOF
    export DEVMAX=1 # $DEVMAX
    export VERBOSE=0 # $VERBOSE
    export HW=1
    export RTPRIO=10
    export AFFINITY=$AFFINITY
    export SINGLE_THREAD_CONTROL=control_dup1
EOF
    sudo bash -c 'source control_program.env; ./ACQPROC/acqproc '${ACQPROC_CONFIG}' '$POST''
    [ "$USE_MDSPLUS" = "1" ] && mdsplus_upload
    echo "Finished"
    export NCOLS=112
    export STORE_COLS="96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111"
    /home/dt100/bin/mds_put_slice.py --ncols $NCOLS --dtype np.uint32 --store_cols $STORE_COLS \
            --tlatch_report=1 --node_name "CH%02d" --default_node ST \
            $UUT1 ${UUT1}_VI.dat

    cd -
}


control_script() {

       (cd PROJECTS/ACQ400/HAPI/acq400_hapi/user_apps/acq400;
        STATUSMONITOR_TRACE=0 ./acq400_capture.py \
		--transient="PRE=0 POST=$TLEN SOFT_TRIGGER=1" \
		$UUT1
       )
}


pwm_control() {
    cd ~/PROJECTS/AFHBA404/LLCONTROL/
    # Inserts PWM control data into the host buffer.
    # Set all channels to 0.
    #PWM_OFFSET=132 DEVNUM=1 IBUF=0 ./pwm_set_channel 0 0
    # Set first channel for test.
    export CH_NUM=0 # 0 is all channels.
    export INITIAL_STATE=1
    export GROUP_PERIOD=1000
    export ICOUNT=250
    export OCOUNT=750
    PWM_OFFSET=132 DEVNUM=1 IBUF=0 ./pwm_set_channel $CH_NUM $INITIAL_STATE $GROUP_PERIOD $ICOUNT $OCOUNT
    cd ~
}


case "x$1" in
xset_clocks)
	set_clocks;;
xcontrol_program)
	control_program;;
xcontrol_script)
	control_script;;
*)
	set_clocks
	set_uut
	new_shot --verbose 1 $UUT1
        if $ACQPROC; then
            echo "Using ACQPROC"
            control_program2 &
        else
            echo "Using original control program"
            sudo $0 control_program &
        fi
        sleep 2
	pwm_control
	control_script
	wait
	echo wait complete
	(cd PROJECTS/AFHBA404; sudo ./scripts/get_latstats)
	;;
esac
